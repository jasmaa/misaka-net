// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	GetInput(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValueMessage, error)
	SendOutput(ctx context.Context, in *ValueMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) GetInput(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValueMessage, error) {
	out := new(ValueMessage)
	err := c.cc.Invoke(ctx, "/grpc.Master/GetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) SendOutput(ctx context.Context, in *ValueMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Master/SendOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	GetInput(context.Context, *empty.Empty) (*ValueMessage, error)
	SendOutput(context.Context, *ValueMessage) (*empty.Empty, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) GetInput(context.Context, *empty.Empty) (*ValueMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInput not implemented")
}
func (UnimplementedMasterServer) SendOutput(context.Context, *ValueMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOutput not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_GetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Master/GetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetInput(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_SendOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).SendOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Master/SendOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).SendOutput(ctx, req.(*ValueMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInput",
			Handler:    _Master_GetInput_Handler,
		},
		{
			MethodName: "SendOutput",
			Handler:    _Master_SendOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/messenger.proto",
}

// ProgramClient is the client API for Program service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramClient interface {
	Run(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Pause(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Load(ctx context.Context, in *LoadMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Send(ctx context.Context, in *SendMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type programClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramClient(cc grpc.ClientConnInterface) ProgramClient {
	return &programClient{cc}
}

func (c *programClient) Run(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Program/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Pause(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Program/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Program/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Load(ctx context.Context, in *LoadMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Program/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Send(ctx context.Context, in *SendMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Program/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramServer is the server API for Program service.
// All implementations must embed UnimplementedProgramServer
// for forward compatibility
type ProgramServer interface {
	Run(context.Context, *empty.Empty) (*empty.Empty, error)
	Pause(context.Context, *empty.Empty) (*empty.Empty, error)
	Reset(context.Context, *empty.Empty) (*empty.Empty, error)
	Load(context.Context, *LoadMessage) (*empty.Empty, error)
	Send(context.Context, *SendMessage) (*empty.Empty, error)
	mustEmbedUnimplementedProgramServer()
}

// UnimplementedProgramServer must be embedded to have forward compatible implementations.
type UnimplementedProgramServer struct {
}

func (UnimplementedProgramServer) Run(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedProgramServer) Pause(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedProgramServer) Reset(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedProgramServer) Load(context.Context, *LoadMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedProgramServer) Send(context.Context, *SendMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedProgramServer) mustEmbedUnimplementedProgramServer() {}

// UnsafeProgramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramServer will
// result in compilation errors.
type UnsafeProgramServer interface {
	mustEmbedUnimplementedProgramServer()
}

func RegisterProgramServer(s grpc.ServiceRegistrar, srv ProgramServer) {
	s.RegisterService(&_Program_serviceDesc, srv)
}

func _Program_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Run(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Pause(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Reset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Load(ctx, req.(*LoadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Send(ctx, req.(*SendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Program_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Program",
	HandlerType: (*ProgramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Program_Run_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Program_Pause_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Program_Reset_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Program_Load_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Program_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/messenger.proto",
}

// StackClient is the client API for Stack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackClient interface {
	Run(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Pause(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Push(ctx context.Context, in *ValueMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Pop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValueMessage, error)
}

type stackClient struct {
	cc grpc.ClientConnInterface
}

func NewStackClient(cc grpc.ClientConnInterface) StackClient {
	return &stackClient{cc}
}

func (c *stackClient) Run(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Stack/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Pause(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Stack/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Stack/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Push(ctx context.Context, in *ValueMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Stack/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackClient) Pop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValueMessage, error) {
	out := new(ValueMessage)
	err := c.cc.Invoke(ctx, "/grpc.Stack/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackServer is the server API for Stack service.
// All implementations must embed UnimplementedStackServer
// for forward compatibility
type StackServer interface {
	Run(context.Context, *empty.Empty) (*empty.Empty, error)
	Pause(context.Context, *empty.Empty) (*empty.Empty, error)
	Reset(context.Context, *empty.Empty) (*empty.Empty, error)
	Push(context.Context, *ValueMessage) (*empty.Empty, error)
	Pop(context.Context, *empty.Empty) (*ValueMessage, error)
	mustEmbedUnimplementedStackServer()
}

// UnimplementedStackServer must be embedded to have forward compatible implementations.
type UnimplementedStackServer struct {
}

func (UnimplementedStackServer) Run(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedStackServer) Pause(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedStackServer) Reset(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedStackServer) Push(context.Context, *ValueMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedStackServer) Pop(context.Context, *empty.Empty) (*ValueMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedStackServer) mustEmbedUnimplementedStackServer() {}

// UnsafeStackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServer will
// result in compilation errors.
type UnsafeStackServer interface {
	mustEmbedUnimplementedStackServer()
}

func RegisterStackServer(s grpc.ServiceRegistrar, srv StackServer) {
	s.RegisterService(&_Stack_serviceDesc, srv)
}

func _Stack_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Stack/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Run(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Stack/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Pause(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Stack/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Reset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Stack/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Push(ctx, req.(*ValueMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stack_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Stack/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).Pop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Stack",
	HandlerType: (*StackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Stack_Run_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Stack_Pause_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Stack_Reset_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Stack_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Stack_Pop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/messenger.proto",
}
