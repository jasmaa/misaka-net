// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProgramClient is the client API for Program service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*CommandReply, error)
	SendValue(ctx context.Context, in *SendValueRequest, opts ...grpc.CallOption) (*CommandReply, error)
}

type programClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramClient(cc grpc.ClientConnInterface) ProgramClient {
	return &programClient{cc}
}

func (c *programClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/grpc.Program/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/grpc.Program/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/grpc.Program/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/grpc.Program/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programClient) SendValue(ctx context.Context, in *SendValueRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/grpc.Program/SendValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramServer is the server API for Program service.
// All implementations must embed UnimplementedProgramServer
// for forward compatibility
type ProgramServer interface {
	Run(context.Context, *RunRequest) (*CommandReply, error)
	Pause(context.Context, *PauseRequest) (*CommandReply, error)
	Reset(context.Context, *ResetRequest) (*CommandReply, error)
	Load(context.Context, *LoadRequest) (*CommandReply, error)
	SendValue(context.Context, *SendValueRequest) (*CommandReply, error)
	mustEmbedUnimplementedProgramServer()
}

// UnimplementedProgramServer must be embedded to have forward compatible implementations.
type UnimplementedProgramServer struct {
}

func (UnimplementedProgramServer) Run(context.Context, *RunRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedProgramServer) Pause(context.Context, *PauseRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedProgramServer) Reset(context.Context, *ResetRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedProgramServer) Load(context.Context, *LoadRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedProgramServer) SendValue(context.Context, *SendValueRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValue not implemented")
}
func (UnimplementedProgramServer) mustEmbedUnimplementedProgramServer() {}

// UnsafeProgramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramServer will
// result in compilation errors.
type UnsafeProgramServer interface {
	mustEmbedUnimplementedProgramServer()
}

func RegisterProgramServer(s grpc.ServiceRegistrar, srv ProgramServer) {
	s.RegisterService(&_Program_serviceDesc, srv)
}

func _Program_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).Load(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Program_SendValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServer).SendValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Program/SendValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServer).SendValue(ctx, req.(*SendValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Program_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Program",
	HandlerType: (*ProgramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Program_Run_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Program_Pause_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Program_Reset_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Program_Load_Handler,
		},
		{
			MethodName: "SendValue",
			Handler:    _Program_SendValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/messenger.proto",
}

// StackClient is the client API for Stack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackClient interface {
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*ValueReply, error)
}

type stackClient struct {
	cc grpc.ClientConnInterface
}

func NewStackClient(cc grpc.ClientConnInterface) StackClient {
	return &stackClient{cc}
}

func (c *stackClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*ValueReply, error) {
	out := new(ValueReply)
	err := c.cc.Invoke(ctx, "/grpc.Stack/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackServer is the server API for Stack service.
// All implementations must embed UnimplementedStackServer
// for forward compatibility
type StackServer interface {
	GetValue(context.Context, *GetValueRequest) (*ValueReply, error)
	mustEmbedUnimplementedStackServer()
}

// UnimplementedStackServer must be embedded to have forward compatible implementations.
type UnimplementedStackServer struct {
}

func (UnimplementedStackServer) GetValue(context.Context, *GetValueRequest) (*ValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedStackServer) mustEmbedUnimplementedStackServer() {}

// UnsafeStackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServer will
// result in compilation errors.
type UnsafeStackServer interface {
	mustEmbedUnimplementedStackServer()
}

func RegisterStackServer(s grpc.ServiceRegistrar, srv StackServer) {
	s.RegisterService(&_Stack_serviceDesc, srv)
}

func _Stack_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Stack/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Stack",
	HandlerType: (*StackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _Stack_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/messenger.proto",
}
